bin_PROGRAMS = makepp

makepp_SOURCES =		\
	annotation_map.cc	\
	colours.cc		\
	exception.cc		\
	file_lexer.cc		\
	lexer.cc		\
	main.cc			\
	node.cc			\
	node_factory.cc		\
	parser.cc		\
	parseutil.cc		\
	phases.cc		\
	serialisation.cc	\
	sighandler.cc		\
	string_lexer.cc		\
	visitor.cc		\
	yylex.ll		\
	yyparse.yy

nodist_makepp_SOURCES =		\
	node_type.cc		\
	nodes.pb.cc

include annotations/Rules.am
include phases/Rules.am
include util/Rules.am

GENFILES = yystate.h rule_init.h node_type.h node_switch.h node_visit.h node_t.h node_cc.h visitor_t.h node_fwd.h visitor_cc.h nodes.pb.h
BUILT_SOURCES += yylex.cc yyparse.cc $(GENFILES)
EXTRA_DIST += yylex.h
CLEANFILES += $(GENFILES) $(nodist_makepp_SOURCES)

nodes.pb.h: nodes.pb.cc
nodes.pb.cc: include/gen/nodes.proto
	$(AM_V_PROTO)protoc --cpp_out=$(builddir) --proto_path=$(<D) $<

yystate.h: yylex.h
	@echo 'namespace yy { enum state {' > $@
	$(AM_V_GEN)grep '^#define [A-Z][A-Z_]* [0-9]\+$$' $< | grep -v ' YY_' | awk '{print $$2 ","}' >> $@
	@echo 'NSTATE' >> $@
	@echo '}; }' >> $@

yylex.h: yylex.cc
yylex.cc: $(CURDIR)/yylex.ll
	$(AM_V_LEX)flex -o$@ $<
	@test -z "`diff ${@:.cc=.h} /tmp/${@:.cc=.h} 2>&1`"	\
		|| (echo "Updating ${@:.cc=.h}" && mv /tmp/${@:.cc=.h} ${@:.cc=.h})

%.h: include/gen/%.pl include/gen/nodes.pm
	$(AM_V_GEN)perl $< > $@

rule_init.h: $(CURDIR)/yyparse.yy
	@echo 'enum rule_init {' > $@
	$(AM_V_GEN)\
	L=`grep -o '^[a-z_]\+$$' $<`;	\
	for i in $$L; do		\
		echo "  r_$$i,"		\
			>> $@;		\
	done
	@echo '  RULE_INITS' >> $@
	@echo '};' >> $@

node_type.h: $(CURDIR)/yyparse.yy
	@echo 'namespace nodes { enum node_type {' > $@
	$(AM_V_GEN)\
	L=`grep -o 'make_node<n_\w*' $<	\
		| sed -e 's/.*<n_//'		\
		| sort -u`;			\
	for i in $$L; do			\
		echo "  n_$$i,"			\
			>> $@;			\
	done
	@echo '  NODE_TYPES' >> $@
	@echo '};' >> $@
	@echo 'extern char const *const node_type_name[];' >> $@
	@echo '}' >> $@

node_switch.h: node_type.h
	@echo 'switch (n.type) {' > $@
	$(AM_V_GEN)\
	L=`grep -o '  n_\w*,$$' $<					\
	    | sed -r -e 's/n_(\w+),/\1/'`;				\
	for i in $$L; do						\
	    echo "  case n_$$i: resume = visit_$$i (n); break;" >> $@;	\
	done
	@echo '}' >> $@

node_visit.h: node_type.h
	@$(RM) $@
	$(AM_V_GEN)\
	L=`grep -o '  n_\w*,$$' $<				\
	    | sed -r -e 's/n_(\w+),/\1/'`;			\
	for i in $$L; do					\
	    echo "  bool visit_$$i (generic_node &n);" >> $@;	\
	done

node_type.cc: node_type.h
	@echo '#include "node_type.h"' > $@
	@echo 'char const *const nodes::node_type_name[] = {' >> $@
	$(AM_V_GEN)\
	L=`grep -o '  n_\w*,$$' $<		\
	    | sed -r -e 's/n_(\w+),/\1/'`;	\
	for i in $$L; do			\
	    echo "  \"$$i\"," >> $@;		\
	done
	@echo '};' >> $@
