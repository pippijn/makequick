%{
#include "parser.h"
#define YYSTYPE YYSTYPE
%}

%union {
  nodes::node *base;
  nodes::node_list *node;
  tokens::token *token;
}

%{
#include "yystate.h"

union YYSTYPE;
static int
yylex (YYSTYPE *yylval, YYLTYPE *yylloc, parser *self)
{
  return self->lex.next (yylval, yylloc);
}

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
 * If N is 0, then set CURRENT to the empty location which ends
 * the previous symbol: RHS[0] (always defined).  */
#define YYLLOC_DEFAULT(Current, Rhs, N)					\
    do {								\
      (Current) = YYRHSLOC (Rhs, 1);					\
      if (N)							\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    } while (0)

/* YY_LOCATION_PRINT -- Print the location on the stream. */
#define YY_LOCATION_PRINT(File, Loc)			\
    fprintf (File, "%d.%d-%d.%d",			\
	     (Loc).first_line, (Loc).first_column,	\
	     (Loc).last_line,  (Loc).last_column)

using namespace nodes;
%}

%define api.pure
%locations
%debug
%error-verbose
%token-table
/*%glr-parser*/

%parse-param	{ parser *self }
%lex-param	{ parser *self }

%token TK_EOF 0				"end of file"

%token KW_ALIGNOF			"alignof"
%token KW_ARG_ENABLE			"arg_enable"
%token KW_BUILT_SOURCES			"built_sources"
%token KW_CONFIG_HEADER			"config_header:"
%token KW_CONTACT			"contact:"
%token KW_DATA				"data"
%token KW_DEFINE			"define"
%token KW_DIR				"dir"
%token KW_ERROR				"error"
%token KW_EXCLUDE			"exclude"
%token KW_EXTERN			"extern"
%token KW_EXTRA_DIST			"extra_dist"
%token KW_FUNCTIONS			"functions"
%token KW_GLOBAL			"global"
%token KW_HEADER			"header:"
%token KW_HEADERS			"headers"
%token KW_IF				"if"
%token KW_LIBRARY			"library"
%token KW_LINK				"link"
%token KW_LOG_COMPILER			"log_compiler"
%token KW_MANS				"mans"
%token KW_NODIST_SOURCES		"nodist_sources"
%token KW_NOTFOUND			"notfound:"
%token KW_OPTIONS			"options"
%token KW_PROGRAM			"program"
%token KW_PROJECT			"project"
%token KW_SCRIPTS			"scripts"
%token KW_SECTION			"section"
%token KW_SIZEOF			"sizeof"
%token KW_SOURCES			"sources"
%token KW_SYMBOL			"symbol:"
%token KW_TEMPLATE			"template"
%token KW_TEST				"test"
%token KW_VERSION			"version:"

%token TK_LSQBRACK			"["
%token TK_RSQBRACK			"]"
%token TK_LBRACK			"("
%token TK_RBRACK			")"
%token TK_LBRACE			"{"
%token TK_RBRACE			"}"
%token TK_DOT				"."
%token TK_DOLLAR			"$"
%token TK_COLON				":"
%token TK_LESS				"<"
%token TK_SEMICOLON			";"
%token TK_EQUALS			"="
%token TK_PLUSEQ			"+="
%token TK_ARROW				"->"
%token TK_DARROW			"=>"
%token TK_WHITESPACE			"whitespace"

%token<token> TK_FN_QMARK		"?"
%token<token> TK_FN_LBRACE		"'{'"
%token<token> TK_FN_RBRACE		"'}'"
%token<token> TK_FN_STAR		"*"
%token<token> TK_FN_STARSTAR		"**"
%token<token> TK_FN_PERCENT		"%"
%token<token> TK_FN_PERPERCENT		"%%"

%token<token> TK_EXT_LIB		"external library"
%token<token> TK_INT_LIB		"internal library"

%token<token> TK_AC_CHECK		"autoconf check"
%token<token> TK_FLAGS_ID		"tool flags"
%token<token> TK_CODE			"shell code"
%token<token> TK_FILENAME		"filename"
%token<token> TK_FLAG			"tool flag"
%token<token> TK_IDENTIFIER		"identifier"
%token<token> TK_INTEGER		"integer literal"
%token<token> TK_STRING			"string literal"
%token<token> TK_SHORTVAR		"short variable name"

%token<token> TK_ERROR			"invalid character"

%token R_FILENAME
%token R_SOURCES

%type<node> sources headers mans data scripts target_definition
%type<node> program library template target_members toplevel_declarations toplevel_declaration
%type<node> single_filename filename filenames.0 filenames.1 sources_member sources_members sources_braces extra_dist
%type<node> rule rule_lines rule_line link link_body vardecl vardecl_body nodist_sources built_sources
%type<node> inheritance.opt inheritance if.opt if destination.opt destination
%type<node> tool_flags flags flag identifiers global_or_target_member log_compiler log_compilers
%type<node> check_alignof check_flags check_functions check_headers check_library check_sizeof
%type<node> define arg_enable arg_enable_options arg_enable_choices
%type<node> arg_enable_choice arg_enable_content project project_members project_member
%type<node> variable variable_content section section_members
%type<base> filename_part flag_part section_member target_member code_frag
%type<token> filename_token link_item string.opt identifier.opt
%type<token> arg_default check_library_notfound.opt

%destructor { delete $$; } <*>

%%
/****************************************************************************
 *
 *	Toplevel declarations
 *
 ****************************************************************************/
document
	: toplevel_declarations
		{ self->doc = make_node<n_document> (@$, $1); }
	| R_FILENAME filename
		{ self->doc = $2; }
	| R_SOURCES sources_members
		{ self->doc = $2; }
	;

toplevel_declarations
	: toplevel_declaration
		{ $$ = make_node<n_toplevel_declarations> (@$, $1); }
	| toplevel_declarations toplevel_declaration
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

toplevel_declaration
	: project
	| program
	| library
	| template
	| headers
	| mans
	| data
	| scripts
	| log_compiler
	| "extern" TK_STRING
		{ $$ = make_node<n_extern> (@$, $2); }
	| global_or_target_member
	;


/****************************************************************************
 *
 *	Project configuration
 *
 ****************************************************************************/
project
	: "project" TK_STRING "{" project_members "}"
		{ $$ = make_node<n_project> (@$, $2, $4); }
	;

project_members
	: project_member
		{ $$ = make_node<n_project_members> (@$, $1); }
	| project_members project_member
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

project_member
	: "version:" TK_STRING
		{ $$ = make_node<n_project_version> (@$, $2); }
	| "contact:" TK_STRING
		{ $$ = make_node<n_project_contact> (@$, $2); }
	| "config_header:" single_filename
		{ $$ = make_node<n_project_header> (@$, $2); }
	| section
	;

section
	: "section" string.opt "{" section_members "}"
		{ $$ = make_node<n_section> (@$, $2, $4); }
	;

section_members
	: section_member
		{ $$ = make_node<n_section_members> (@$, $1); }
	| section_members section_member
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

section_member
	: TK_AC_CHECK
		{ $$ = make_node<n_ac_check> (@$, $1); }
	| arg_enable
		{ $$ = $1; }
	| check_alignof
		{ $$ = $1; }
	| check_flags
		{ $$ = $1; }
	| check_functions
		{ $$ = $1; }
	| check_headers
		{ $$ = $1; }
	| check_library
		{ $$ = $1; }
	| check_sizeof
		{ $$ = $1; }
	| "error" TK_STRING
		{ $$ = make_node<n_error> (@$, $2); }
	| define
		{ $$ = $1; }
	| TK_STRING
		{ $$ = $1; }
	;

arg_enable
	: "arg_enable" TK_IDENTIFIER "=" arg_default "{"
	    TK_STRING
	    arg_enable_content
	  "}"
		{ $$ = make_node<n_arg_enable> (@$, $2, $4, $6, $7); }
	;

arg_default
	: TK_IDENTIFIER
	| TK_STRING
	;

arg_enable_content
	: { $$ = NULL; }
	| section_members
	| arg_enable_options
	;

arg_enable_options
	: "options" "{" arg_enable_choices "}"
		{ $$ = $3; }
	;

arg_enable_choices
	: arg_enable_choice
		{ $$ = make_node<n_arg_enable_choices> (@$, $1); }
	| arg_enable_choices arg_enable_choice
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

arg_enable_choice
	: TK_IDENTIFIER "=>" "{" section_members "}"
		{ $$ = make_node<n_arg_enable_choice> (@$, $1, $4); }
	;

check_alignof
	: "alignof" "{" TK_STRING "}"
		{ $$ = make_node<n_check_alignof> (@$, $3); }
	;

check_flags
	: TK_FLAGS_ID identifier.opt flags_begin flags flags_end
		{ $$ = make_node<n_check_flags> (@$, $1, $2, $4); }
	;

check_functions
	: "functions" "{" identifiers "}"
		{ $$ = make_node<n_check_functions> (@$, $3); }
	;

check_headers
	: "headers" sources_begin TK_WHITESPACE filenames.1 "}"
		{ $$ = make_node<n_check_headers> (@$, $4); }
	;

check_library
	: "library" TK_IDENTIFIER "{"
	    "symbol:" TK_IDENTIFIER
	    "header:" single_filename
	    check_library_notfound.opt
	    string.opt
	  "}"
		{ $$ = make_node<n_check_library> (@$, $2, $5, $7, $8, $9); }
	;

check_library_notfound.opt
	: { $$ = NULL; }
	| "notfound:" TK_STRING
		{ $$ = $2; }
	;

check_sizeof
	: "sizeof" "{" TK_STRING "}"
		{ $$ = make_node<n_check_sizeof> (@$, $3); }
	;

define
	: "define" TK_IDENTIFIER "{" TK_STRING "}"
		{ $$ = make_node<n_define> (@$, $2, $4); }
	;


/****************************************************************************
 *
 *	Targets (program/library/template)
 *
 ****************************************************************************/
program
	: "program" target_definition
		{ $$ = make_node<n_program> (@$, $2); }
	;

library
	: "library" target_definition
		{ $$ = make_node<n_library> (@$, $2); }
	;

template
	: "template" target_definition
		{ $$ = make_node<n_template> (@$, $2); }
	;

target_definition
	: TK_IDENTIFIER inheritance.opt if.opt destination.opt "{" target_members "}"
		{ $$ = make_node<n_target_definition> (@$, $1, $2, $3, $4, $6); }
	;

inheritance.opt
	: { $$ = NULL; }
	| inheritance
	;

inheritance
	: "<" TK_IDENTIFIER
		{ $$ = make_node<n_inheritance> (@$, $2); }
	;

destination.opt
	: { $$ = NULL; }
	| destination
	;

destination
	: "->" TK_IDENTIFIER
		{ $$ = make_node<n_destination> (@$, $2); }
	;

target_members
	:
		{ $$ = make_node<n_target_members> (@$); }
	| target_members target_member
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

target_member
	: sources			{ $$ = $1; }
	| TK_STRING			{ $$ = $1; }
	| nodist_sources		{ $$ = $1; }
	| link				{ $$ = $1; }
	| global_or_target_member	{ $$ = $1; }
	;

global_or_target_member
	: rule
	| vardecl
	| extra_dist
	| tool_flags
	| built_sources
	| "dir" TK_IDENTIFIER "=" single_filename
		{ $$ = make_node<n_dir> (@$, $2, $4); }
	| "test" identifier.opt if.opt sources_braces
		{ $$ = make_node<n_test> (@$, $2, $3, $4); }
	;

/****************************************************************************
 *
 *	Sources
 *
 ****************************************************************************/
sources
	: "sources" if.opt sources_braces
		{ $$ = make_node<n_sources> (@$, $2, $3); }
	;

nodist_sources
	: "nodist_sources" if.opt sources_braces
		{ $$ = make_node<n_nodist_sources> (@$, $2, $3); }
	;

extra_dist
	: "extra_dist" if.opt sources_braces
		{ $$ = make_node<n_extra_dist> (@$, $2, $3); }
	;


headers
	: "headers" if.opt destination.opt sources_braces
		{ $$ = make_node<n_headers> (@$, $2, $3, $4); }
	;

built_sources
	: "built_sources" sources_braces
		{ $$ = make_node<n_built_sources> (@$, $2); }
	;

mans
	: "mans" if.opt destination.opt sources_braces
		{ $$ = make_node<n_mans> (@$, $2, $3, $4); }
	;

data
	: "data" if.opt destination.opt sources_braces
		{ $$ = make_node<n_data> (@$, $2, $3, $4); }
	;

scripts
	: "scripts" if.opt destination.opt sources_braces
		{ $$ = make_node<n_scripts> (@$, $2, $3, $4); }
	;


sources_braces
	: sources_begin sources_members TK_WHITESPACE "}"
		{ $$ = $2; }
	;

sources_begin
	: "{" { self->lex.push_state (yy::FILENAME); }
	;

sources_members
	: sources_member
		{ $$ = make_node<n_sources_members> (@$, $1); }
	| sources_members sources_member
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

sources_member
	: TK_WHITESPACE filename
		{ $$ = $2; }
	| TK_WHITESPACE "sources" "(" TK_IDENTIFIER ")"
		{ $$ = make_node<n_sourcesref> (@$, $4); }
	| TK_WHITESPACE "exclude" sources_braces
		{ $$ = make_node<n_exclude> (@$, $3); }
	;

/****************************************************************************
 *
 *	Tool flags
 *
 ****************************************************************************/
tool_flags
	: TK_FLAGS_ID if.opt flags_begin flags flags_end
		{ $$ = make_node<n_tool_flags> (@$, $1, $2, $4); }
	;

flags_begin
	: "{" { self->lex.push_state (yy::FLAGS); }
	;

flags_end
	: "}" { self->lex.pop_state (); }
	;

flags
	: TK_WHITESPACE
		{ $$ = make_node<n_flags> (@$); }
	| flags flag TK_WHITESPACE
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

flag
	: flag_part
		{ $$ = make_node<n_flag> (@$, $1); }
	| flag flag_part
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

flag_part
	: TK_FLAG
		{ $$ = $1; }
	| TK_STRING
		{ $$ = $1; }
	| variable
		{ $$ = $1; }
	| TK_FLAGS_ID "(" ")"
		{ $$ = make_node<n_flag_import> (@$, $1,  0); }
	| TK_FLAGS_ID "(" TK_IDENTIFIER ")"
		{ $$ = make_node<n_flag_import> (@$, $1, $3); }
	;

/****************************************************************************
 *
 *	Custom rules
 *
 ****************************************************************************/
rule
	: filenames.1 ":" filenames.0 "{" rule_lines "}"
		{ $$ = make_node<n_rule> (@$, $1, $3, $5); }
	| filenames.1 ":" filenames.0 ";"
		{ $$ = make_node<n_rule> (@$, $1, $3,  0); }
	;

rule_lines
	: TK_WHITESPACE rule_line
		{ $$ = make_node<n_rule_lines> (@$, $2); }
	| rule_lines TK_WHITESPACE rule_line
		{ ($$ = $1)->add ($3)->loc = @$; }
	;

rule_line
	: code_frag
		{ $$ = make_node<n_rule_line> (@$, $1); }
	| rule_line code_frag
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

filenames.0
	: TK_WHITESPACE
		{ $$ = make_node<n_filenames> (@$); }
	| filenames.0 filename TK_WHITESPACE
		{ ($$ = $1)->add ($2)->loc = @$; $$->loc.file = $2->loc.file; }
	;

filenames.1
	: filename TK_WHITESPACE
		{ $$ = make_node<n_filenames> (@$, $1); }
	| filenames.1 filename TK_WHITESPACE
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

/****************************************************************************
 *
 *	Test suite support
 *
 ****************************************************************************/
log_compiler
	: "log_compiler" "{" log_compilers "}"
		{ $$ = $3; }
	;

log_compilers
	: rule
		{ t_rule_ptr rule = &$1->as<t_rule> (); $$ = make_node<n_log_compilers> (@$, make_node<n_log_compiler> (@1, rule->target (), rule->code ())); }
	| log_compilers rule
		{ t_rule_ptr rule = &$2->as<t_rule> (); ($$ = $1)->add (make_node<n_log_compiler> (@2, rule->target (), rule->code ()))->loc = @$; }
	;

/****************************************************************************
 *
 *	Link
 *
 ****************************************************************************/
link
	: "link" if.opt link_begin link_body link_end
		{ $$ = make_node<n_link> (@$, $2, $4); }
	;

link_begin
	: "{" { self->lex.push_state (yy::LINK); }
	;

link_end
	: "}" { self->lex.pop_state (); }
	;

link_body
	: link_item
		{ $$ = make_node<n_link_body> (@$, $1); }
	| link_body link_item
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

link_item
	: TK_INT_LIB
	| TK_EXT_LIB
	;

/****************************************************************************
 *
 *	Variable declarations
 *
 ****************************************************************************/
vardecl
	: TK_IDENTIFIER "=" vardecl_body TK_WHITESPACE
		{ $$ = make_node<n_vardecl> (@$, $1, $3); }
	| TK_IDENTIFIER "+=" vardecl_body TK_WHITESPACE
		{ $$ = make_node<n_varadd> (@$, $1, $3); }
	;

vardecl_body
	: code_frag
		{ $$ = make_node<n_vardecl_body> (@$, $1); }
	| vardecl_body code_frag
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

/****************************************************************************
 *
 *	Conditional building
 *
 ****************************************************************************/
if.opt
	: { $$ = NULL; }
	| if
	;

if
	: "if" TK_IDENTIFIER
		{ $$ = make_node<n_if> (@$, $2); }
	;

/****************************************************************************
 *
 *	Tokens
 *
 ****************************************************************************/
string.opt
	: { $$ = NULL; }
	| TK_STRING
	;

identifier.opt
	: { $$ = NULL; }
	| TK_IDENTIFIER
	;

identifiers
	: TK_IDENTIFIER
		{ $$ = make_node<n_identifiers> (@$, $1); }
	| identifiers TK_IDENTIFIER
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

single_filename
	: single_filename_begin filename single_filename_end
		{ $$ = $2; }
	;

single_filename_begin
	: { self->lex.push_state (yy::FILENAME); self->lex.push_state (yy::INITWS); }
	;

single_filename_end
	: TK_WHITESPACE { self->lex.pop_state (); }
	;

filename
	: filename_part
		{ $$ = make_node<n_filename> (@$, $1); }
	| filename filename_part
		{ ($$ = $1)->add ($2)->loc = @$; }
	;

filename_part
	: filename_token
		{ $$ = $1; }
	| variable
		{ $$ = $1; }
	;

filename_token
	: TK_FILENAME
	| TK_IDENTIFIER
	| "?"
	| "'{'"
	| "'}'"
	| "*"
	| "**"
	| "%"
	| "%%"
	;

code_frag
	: TK_CODE
		{ $$ = $1; }
	| variable
		{ $$ = $1; }
	;

variable
	: "$" TK_SHORTVAR
		{ $$ = make_node<n_shortvar> (@$, $2); }
	| "$" TK_INTEGER
		{ $$ = make_node<n_intvar> (@$, $2); }
	| "$" "(" variable_content ")"
		{ $$ = $3; }
	| "$" "[" TK_IDENTIFIER "]"
		{ $$ = make_node<n_squarevar> (@$, $3); }
	;

variable_content
	: TK_IDENTIFIER
		{ $$ = make_node<n_roundvar> (@$, $1); }
	| TK_IDENTIFIER variable
		{ $$ = make_node<n_callvar> (@$, $1, $2); }
	| TK_IDENTIFIER "." TK_IDENTIFIER
		{ $$ = make_node<n_accessvar> (@$, $1, $3); }
	| TK_IDENTIFIER "." TK_IDENTIFIER ":" TK_IDENTIFIER
		{ $$ = make_node<n_filtervar> (@$, $1, $3, $5); }
	;

%%

char const *
tokname (yySymbol yytoken)
{
  return yytname[yytoken - 255];
}
