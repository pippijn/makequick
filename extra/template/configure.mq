# The "project" block defines global properties and requirements for the project.
# Unlike rule files, this block is not purely declarative and there may only be
# one. While the rule translator is free to move around declarations, the project
# block defines an order in which requirements are tested. This order is honoured
# by the translator.
project 'Aldor Compiler' {
	version: '1.1.0'
	contact: 'aldor@xinutec.org'

	config_header: include/config/autoconf.h

	# For better readability of the configure script output, you may group
	# checks in sections.
	section 'library linkage' {
		# GNU Multiprecision Library, can be disabled with --without-gmp, because
		# all targets that link to it are optional.
		library gmp {
			symbol: mpz_init
			header: gmp.h
			# You may add a description to each check. This will cause it to appear
			# in the summary at the end of a configure run.
			'Build with GNU Multiprecision Library support'
		}

		# Mathematics library. Cannot be disabled, because non-optional targets
		# link to it.
		library m {
			symbol: log
			header: math.h
		}
		headers {
			# Valgrind runtime support
			valgrind/valgrind.h
		}

		# For opsys
		functions {
			sigaction
		}

		# For unistd
		headers {
			unistd.h
			io.h
			direct.h
		}
		functions {
			isatty _isatty
			getcwd _getcwd
			chdir _chdir
		}

		# For sal_util in libaldor
		headers {
			sys/time.h
			sys/timeb.h
		}
		functions {
			gettimeofday
			ftime _ftime
		}
	}

	section {
		arg_enable coverage {
			'Build with test coverage'
			cflags COV_CFLAGS { --coverage }
		}

		arg_enable strict-c {
			'Use maximum warning levels available in C compiler'
		}

		arg_enable new-hashcode-algo = yes {
			'Use the new type hash code algorithm'
		}

		arg_enable bigint-do-debug {
			'Display debug info for the BInt manipulation'
		}

		arg_enable bigint-short-immed {
			'Defines IInt as "short" rather than "int"'
		}

		arg_enable bigint-test-base {
			'Use only 6 bits for the bigint base instead of the full machine word for testing'
		}

		arg_enable store-wipe-new = yes {
			'Newly allocated store contains 0xAAAA...'
		}

		arg_enable store-zero-new {
			'Newly allocated store contains zeros'
		}

		arg_enable store-zero-old = yes {
			'Freed storage contains 0xDDDD...'
		}

		arg_enable libcstub {
			'Prevent linking against libc'
			cflags STRICT_LDFLAGS { -Wc,-nodefaultlibs }
			cflags { -fno-stack-protector }
		}

		arg_enable alignment-check {
			'Enable alignment checking if available'
		}

		arg_enable stackchk {
			'Enable stack protector if available'
			cflags { -fstack-protector-all }
		}

		arg_enable zacc = '`test ! -f $srcdir/src/compiler/phases/parse/axl.c`' {
			'Build YACC preprocessor'
		}

		arg_with mem-manager = malloc {
			'Choose the memory management algorithm'
			options {
				once => {
					define STO_USE_ONCE {
						'Do not free any memory (malloc)'
					}
				}
				malloc => {
					define STO_USE_MALLOC {
						'Based on malloc/free (malloc)'
					}
				}
				boehm => {
					define STO_USE_BOEHM {
						'Use Boehm-Demers-Weiser conservative garbage collector (GC_malloc)'
					}
					library gc {
						symbol: GC_malloc
						header: gc/gc.h
						notfound: 'Selected Boehm-Demers-Weiser memory manager'
					}
				}
				dmalloc => {
					define STO_USE_DMALLOC {
						'Use debug malloc (dmalloc)'
					}
					library dmalloc {
						symbol: dmalloc_malloc
						header: dmalloc.h
						notfound: 'Selected dmalloc memory manager'
					}
				}
				vcalloc => {
					define STO_USE_VCALLOC {
						'Use visual studio debug malloc (_malloc_dbg)'
					}
				}
				_ => {
					error 'Unsupported memory manager: "$mem_manager"'
				}
			}
		}
	}

	section 'compiler flags' {
		cflags {
			-pipe
			-ggdb3
			-pedantic
			-ansi

			-fvisibility=hidden
		}

		cflags STRICT_LDFLAGS {
			-Wl,-z,defs
			-Wl,-z,nodlopen
			-Wl,-z,noexecstack
			-Wl,-z,now
			-Wl,--as-needed
		}
	}

	section 'compiler features and properties' {
		# We need to do these checks after adding pedantic flags
		c_bigendian
		c_typeof
		c_charset
		c_enum_fwdecl
			
		#c_stmt_exprs
		c_late_expansion
		c_token_paste
		c_float_format
		c_stdint_h

		# Get natural alignment for some types
		alignof { 'void *' }
		alignof { 'double' } # probably maximally aligned
	}
}
